# https://leetcode.com/problems/largest-rectangle-in-histogram/description/  
#
#
# Given n non-negative integers representing the histogram's bar height 
# where the width of each bar is 1, find the area of largest rectangle 
# in the histogram.

# Above is a histogram where width of each bar is 1, 
# given height = [2,1,5,6,2,3].

# The largest rectangle is shown in the shaded area, which has area = 10 unit.

# Example:
# Input: [2,1,5,6,2,3]
# Output: 10

## First try, O(n^2), Time Limit Exceeded
class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        if len(heights) == 0:
            return 0
        maxArea = 0
        
        for pointer in range(0, len(heights)): # stuck at range, which includes start but not end
            base = heights[pointer]
            lp = pointer
            rp = pointer
            
            ## both lp & rp end in out side of last valid index
            while heights[lp] >= base:
                lp -= 1
                if lp == -1:
                    break

            while heights[rp] >= base:
                rp += 1
                if rp == len(heights): 
                    break
            
            area = base * (rp - lp - 1)
            maxArea = area if maxArea < area else maxArea
        return maxArea
        
# Best Answer Walkthrough
# Achieved with Stack

# Idea: 
# 

class Solution(object):
    def largestRectangleArea(self, height):
        ## Add 0 to the end of height
        height.append(0)
        ## Create a list as stack with one element -1
        stack = [-1]
        ## Holder for result
        ans = 0
        ## loop through all indexes
        for i in xrange(len(height)):
            ## when each element is smaller than the element at the index of last of the stack
            ## base case: height[0] < height[-1], first element < last element
            while height[i] < height[stack[-1]]:
                ## rect h = last element value
                h = height[stack.pop()]
                ## width = current index - value index (last) - 1
                w = i - stack[-1] - 1
                ## ans 
                ans = max(ans, h * w)
            ## Add current index into the stack
            stack.append(i)
            
        ## Second loop: 
        # i = 1, stack = [0], 
        # while height[1] < height[0], h = height[0], w = 0
        
        height.pop()
        return ans
