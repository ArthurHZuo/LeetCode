## My solution, straightforward stacK implementation
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        if len(s) == 0: return True
        
        def match(s1, s2):
            if ( s1 == '(' and s2 == ')' ) \
            or ( s1 == '[' and s2 == ']' ) \
            or ( s1 == '{' and s2 == '}' ):
                return True
            else: return False
    
        ls = list(s)
        temp = []
        
        while len(ls) > 0:
            if len(temp) == 0:
                temp.append(ls.pop())
            elif match(ls[-1], temp[-1]):
                temp.pop()
                ls.pop()
            else: 
                temp.append(ls.pop())
        
        return True if len(temp) == 0 else False

## Better Solutions from Discussion:
## 1. Using dictionary instead of a match function. 
class Solution:
    # @return a boolean
    def isValid(self, s):
        stack = []
        dict = {"]":"[", "}":"{", ")":"("}
        for char in s:
            if char in dict.values():
                stack.append(char)
            elif char in dict.keys():
                if stack == [] or dict[char] != stack.pop():
                    return False
            else:
                return False
        return stack == []
    
